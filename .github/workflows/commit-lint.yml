name: Commit Message Validation

on:
  push:
    branches: ['**']  # All branches
  pull_request:
    branches: [main, develop]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for commit message validation

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Validate current commit (on push)
        if: github.event_name == 'push'
        run: |
          echo "Validating commit message: ${{ github.event.head_commit.message }}"
          echo "${{ github.event.head_commit.message }}" | npx commitlint

      - name: Validate PR commits (on pull request)
        if: github.event_name == 'pull_request'
        run: |
          # Validate all commits in the PR
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Validate commit message format
        if: failure()
        run: |
          echo "‚ùå Commit message validation failed!"
          echo ""
          echo "üìã Conventional Commit Format Required:"
          echo "   <type>[optional scope]: <description>"
          echo ""
          echo "‚úÖ Valid Types:"
          echo "   feat     - New feature (minor version)"
          echo "   fix      - Bug fix (patch version)"
          echo "   docs     - Documentation changes"
          echo "   style    - Code style changes (formatting, etc.)"
          echo "   refactor - Code refactoring"
          echo "   perf     - Performance improvements"
          echo "   test     - Adding or updating tests"
          echo "   build    - Build system changes"
          echo "   ci       - CI/CD changes"
          echo "   chore    - Maintenance tasks"
          echo ""
          echo "üî• Breaking Changes:"
          echo "   feat!: <description>    - Major version bump"
          echo "   fix!: <description>     - Major version bump"
          echo ""
          echo "üìù Examples:"
          echo "   feat(auth): add JWT token refresh endpoint"
          echo "   fix(config): handle missing environment variables"
          echo "   docs: update API documentation"
          echo "   feat!: remove deprecated API endpoint"
          echo ""
          echo "üîó More info: https://www.conventionalcommits.org/"
          exit 1

  # Additional job to check commit message on specific events
  commit-message-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and validate commit message
        run: |
          # Get the commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Checking commit message: $COMMIT_MSG"
          
          # Check if commit message follows conventional commit format
          if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?!?:.+"; then
            echo "‚ùå COMMIT MESSAGE VALIDATION FAILED"
            echo ""
            echo "Your commit message:"
            echo "\"$COMMIT_MSG\""
            echo ""
            echo "Does not follow Conventional Commits format."
            echo ""
            echo "Required format: <type>[optional scope]: <description>"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
            echo ""
            echo "Examples:"
            echo "  ‚úÖ feat(auth): add user authentication"
            echo "  ‚úÖ fix: resolve database connection issue"
            echo "  ‚úÖ docs: update API documentation"
            echo "  ‚úÖ feat!: remove deprecated API (breaking change)"
            echo ""
            echo "Learn more: https://www.conventionalcommits.org/"
            exit 1
          fi
          
          echo "‚úÖ Commit message format is valid!"

  # Block non-conventional commits on protected branches
  enforce-conventional-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Get current and previous commit

      - name: Strict validation for protected branches
        run: |
          # Get all new commits pushed to protected branch
          COMMITS=$(git rev-list --reverse HEAD^..HEAD)
          
          for commit in $COMMITS; do
            COMMIT_MSG=$(git log --format=%B -n 1 $commit | head -n 1)
            echo "Validating commit $commit: $COMMIT_MSG"
            
            # Strict regex for conventional commits
            if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z0-9\-]+\))?!?: .{1,72}$"; then
              echo "‚ùå STRICT VALIDATION FAILED for protected branch"
              echo "Commit: $commit"
              echo "Message: $COMMIT_MSG"
              echo ""
              echo "Protected branches require strict conventional commit format:"
              echo "- Type must be lowercase"
              echo "- Scope (if present) must be lowercase with hyphens"
              echo "- Description must be 1-72 characters"
              echo "- No trailing periods"
              echo ""
              echo "Example: feat(device-mgmt): add device registration endpoint"
              exit 1
            fi
          done
          
          echo "‚úÖ All commits on protected branch follow strict conventional format!"

  # Summary job that other workflows can depend on
  commit-validation-summary:
    runs-on: ubuntu-latest
    needs: [commitlint, commit-message-check]
    if: always()
    steps:
      - name: Validation Summary
        run: |
          if [[ "${{ needs.commitlint.result }}" == "success" && "${{ needs.commit-message-check.result }}" == "success" ]]; then
            echo "‚úÖ All commit message validations passed!"
            echo "Commits follow Conventional Commit format."
          else
            echo "‚ùå Commit message validation failed!"
            echo "Please update your commit messages to follow Conventional Commits format."
            echo ""
            echo "Quick fix for the last commit:"
            echo "git commit --amend -m 'feat: your new conventional message'"
            echo ""
            echo "For older commits, you may need to rebase:"
            echo "git rebase -i HEAD~n  # where n is number of commits to fix"
            exit 1
          fi
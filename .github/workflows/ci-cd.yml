name: Build, dockerize, sec-scan, sem-ver




on:
  push:
    branches: ['**']  # Trigger on all branches
  pull_request:
    branches: [main, develop]  # PRs to protected branches

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.21'
  SERVICE_NAME: 'helloworld'
  DOCKER_IMAGE_NAME: 'helloworld'
  WORKING_DIRECTORY: './src'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      service: ${{ steps.changes.outputs.service }}
      specs: ${{ steps.changes.outputs.specs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            service:
              - 'src/**'

  # Go service CI
  service-ci:
    runs-on: ubuntu-latest
    needs: detect-changes
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Build application
        run: go build -v ./cmd/main.go

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage.out
          flags: ${{ env.SERVICE_NAME }}
          name: ${{ env.SERVICE_NAME }}-coverage

  # Docker build and security scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [detect-changes, service-ci]
    if: needs.detect-changes.outputs.service == 'true' || github.ref == 'refs/heads/main' || github.event_name == 'push'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }} # Use PAT with write:packages scope

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: '${{ env.WORKING_DIRECTORY }}/trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '${{ env.WORKING_DIRECTORY }}/trivy-results.sarif'
        continue-on-error: true


  # Security and compliance checks
  security-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.service == 'true' || github.ref == 'refs/heads/main' || github.event_name == 'push'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Go security tools
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run vulnerability check
        run: govulncheck ./...
        continue-on-error: true

      - name: Run additional static analysis
        run: staticcheck ./...

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true  # Allow demo to proceed even with potential secrets
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}

  # Release management (main branch only)
  release:
    runs-on: ubuntu-latest
    needs: [service-ci, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
        run: npx semantic-release

  # Notification (optional)

  # Docker build and push on release tag
  docker-release:
    name: Build & Push Docker Image on Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    env:
      REGISTRY: ghcr.io
      SERVICE_NAME: 'helloworld'
      DOCKER_IMAGE_NAME: 'helloworld'
      WORKING_DIRECTORY: './src'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract release tag
        id: extract_tag
        run: |
          TAG="${GITHUB_REF##*/}"
          # Remove 'v' prefix if present (semantic-release uses v1.0.0)
          IMAGE_TAG="${TAG#v}"
          echo "release_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image with release tag
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.extract_tag.outputs.release_tag }}
          labels: release-tag=${{ steps.extract_tag.outputs.release_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.extract_tag.outputs.release_tag }}
          format: 'sarif'
          output: '${{ env.WORKING_DIRECTORY }}/trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '${{ env.WORKING_DIRECTORY }}/trivy-results.sarif'
        continue-on-error: true